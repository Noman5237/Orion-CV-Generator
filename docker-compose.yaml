version: "3.9"

# TODO: Create specialized dockerfiles for each service
# TODO: Create a separate docker-compose file for simulating the production environment
services:
  backend-o7n-db:
    image: postgres:${BACKEND_O7N_POSTGRES_VERSION}
    restart: always
    environment:
      POSTGRES_DB: ${BACKEND_O7N_POSTGRES_NAME}
      POSTGRES_USER: ${BACKEND_O7N_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BACKEND_O7N_POSTGRES_PASSWORD}
    volumes:
      - backend-o7n-db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 3s
    networks:
      - orion-vpn

  backend-tokens-db:
    image: redis:alpine
    command: redis-server --requirepass ${BACKEND_TOKENS_REDIS_PASSWORD}
    volumes:
      - backend-tokens-db:/data
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli ping | grep PONG" ]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 2s
    networks:
      - orion-vpn

  backend-documents:
    image: mongodb/mongodb-community-server:${BACKEND_DOCUMENTS_MONGODB_VERSION}
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${BACKEND_DOCUMENTS_MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${BACKEND_DOCUMENTS_MONGODB_PASSWORD}
    volumes:
      - backend-documents:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ connectionStatus: 1 })" ]
      interval: 3s
      timeout: 3s
      retries: 3
      start_period: 3s
    networks:
      - orion-vpn

  backend-object-storage:
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${BACKEND_OBJECT_STORAGE_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${BACKEND_OBJECT_STORAGE_MINIO_ROOT_PASSWORD}
    volumes:
      - backend-object-storage:/data
    command: server --console-address ":9001" /data
    networks:
      - orion-vpn

  backend-object-storage-setup:
    image: minio/mc
    depends_on:
      - backend-object-storage
    environment:
      - MINIO_ROOT_USER=${BACKEND_OBJECT_STORAGE_MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${BACKEND_OBJECT_STORAGE_MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
        mc config host add backend-object-storage http://backend-object-storage:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
        buckets=('test')
        for bucket in $${buckets[@]}; do
          mc mb backend-object-storage/$$bucket;
        done;
        exit 0;
      "
    networks:
      - orion-vpn

volumes:
  backend-o7n-db:
  backend-tokens-db:
  backend-object-storage:
  backend-documents:

networks:
  orion-vpn:
